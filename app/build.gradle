plugins {
  id 'com.android.application'
  id 'kotlin-android'
  id 'kotlin-parcelize'
  id 'kotlin-kapt'
  id 'com.google.gms.google-services'
  id 'com.google.firebase.crashlytics'
  id 'androidx.navigation.safeargs.kotlin'
}

if (project.hasProperty('useFirebasePerf')) {
  apply plugin: 'com.google.firebase.firebase-perf'
}

// Load keystore
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
def debugKeystorePath = 'key/debug.jks'
if (keystorePropertiesFile.exists()) {
  keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
  keystoreProperties['storeFile'] = debugKeystorePath
}

// Build archive name
def applicationName = "S-Boom"

android {

  compileSdkVersion 29

  defaultConfig {
    applicationId "ru.frogogo.sboom"

    minSdkVersion 23
    targetSdkVersion 29

    versionCode 1
    versionName "0.0.1"

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    setProperty("archivesBaseName", applicationName + "-v" + versionCode + "(" + versionName + ")-" + getDate())

    buildConfigField 'int', 'API_VERSION', '1'
    buildConfigField 'boolean', 'DEBUG_STUFF', 'true'
    buildConfigField "java.util.Date", "BUILD_TIME", "new java.util.Date(" + System.currentTimeMillis() + "L)"
  }

  signingConfigs {
    release {
      storeFile file(keystoreProperties['storeFile'])
      if (keystorePropertiesFile.exists()) {
        storePassword keystoreProperties['storePassword']
        keyAlias keystoreProperties['keyAlias']
        keyPassword keystoreProperties['keyPassword']
      }
    }
    debug {
      storeFile file(debugKeystorePath)
    }
  }

  flavorDimensions 'server'
  productFlavors {
    staging {
      dimension 'server'

      buildConfigField 'String', 'BASE_URL', '"https://sboom-staging.herokuapp.com"'
    }
    production {
      dimension 'server'

      buildConfigField 'String', 'BASE_URL', '"https://sboom.herokuapp.com"'
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      shrinkResources true
      zipAlignEnabled true

      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release

      buildConfigField 'boolean', 'DEBUG_STUFF', 'false'
    }
    debug {
      debuggable true
      signingConfig signingConfigs.debug
      ext.enableCrashlytics = false
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  // https://developer.android.com/studio/write/java8-support
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8
    freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
  }

  lintOptions {
    disable 'ContentDescription'
  }

  buildFeatures {
    viewBinding = true
  }

}

kapt {
  useBuildCache = true
  correctErrorTypes true
}

dependencies {
  // Kotlin
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

  // AndroidX
  implementation 'androidx.core:core-ktx:1.3.2'
  // AppCompat https://developer.android.com/jetpack/androidx/releases/appcompat
  implementation 'androidx.appcompat:appcompat:1.2.0'
  // Fragment https://developer.android.com/jetpack/androidx/releases/fragment
  implementation 'androidx.fragment:fragment-ktx:1.3.3'
  // ConstraintLayout https://developer.android.com/jetpack/androidx/releases/constraintlayout
  implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
  // ViewPager2 https://developer.android.com/jetpack/androidx/releases/viewpager2
  implementation "androidx.viewpager2:viewpager2:1.0.0"
  // SwipeRefresh https://developer.android.com/jetpack/androidx/releases/swiperefreshlayout
  implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
  // WorkManager https://developer.android.com/jetpack/androidx/releases/work
  implementation 'androidx.work:work-runtime-ktx:2.5.0'

  // Google Play Services https://developers.google.com/android/guides/setup
  implementation 'com.google.android.gms:play-services-auth:19.0.0'
  // https://developers.google.com/android/guides/releases
  implementation 'com.google.android.gms:play-services-auth-api-phone:17.5.0'

  // Material Design Components https://github.com/material-components/material-components-android
  implementation 'com.google.android.material:material:1.3.0'

  // Navigation https://developer.android.com/jetpack/androidx/releases/navigation
  def navVersion = '2.3.5'
  implementation "androidx.navigation:navigation-fragment-ktx:$navVersion"
  implementation "androidx.navigation:navigation-ui-ktx:$navVersion"

  // ViewModel and LiveData https://developer.android.com/jetpack/androidx/releases/lifecycle
  def lifecycleVersion = '2.3.1'
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
  implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
  implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
  implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

  // Adapter Delegates https://github.com/sockeqwe/AdapterDelegates
  def adapterDelegatesVersion = '4.3.0'
  implementation "com.hannesdorfmann:adapterdelegates4:$adapterDelegatesVersion"
  implementation "com.hannesdorfmann:adapterdelegates4-kotlin-dsl-viewbinding:$adapterDelegatesVersion"

  // ViewBindingPropertyDelegate https://github.com/kirich1409/ViewBindingPropertyDelegate
  implementation 'com.github.kirich1409:viewbindingpropertydelegate:1.4.6'

  // CircleIndicator https://github.com/ongakuer/CircleIndicator
  implementation 'me.relex:circleindicator:2.1.6'

  // LiveEvent https://github.com/hadilq/LiveEvent
  implementation "com.github.hadilq.liveevent:liveevent:1.2.0"

  // WhatIf https://github.com/skydoves/WhatIf
  implementation 'com.github.skydoves:whatif:1.1.0'

  // Coroutines https://github.com/Kotlin/kotlinx.coroutines
  def coroutinesVersion = '1.4.2'
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

  // AndroidX Crypto https://developer.android.com/jetpack/androidx/releases/security
  implementation 'androidx.security:security-crypto:1.0.0'

  // Input Mask https://github.com/RedMadRobot/input-mask-android
  implementation 'com.redmadrobot:input-mask-android:6.0.0'

  // Coil https://github.com/coil-kt/coil/
  implementation 'io.coil-kt:coil:1.2.1'

  // Koin https://github.com/InsertKoinIO/koin
  def koinVersion = '3.0.1'
  implementation "io.insert-koin:koin-android:$koinVersion"
  implementation "io.insert-koin:koin-androidx-workmanager:$koinVersion"

  // Retrofit https://github.com/square/retrofit
  def retrofitVersion = '2.9.0'
  implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
  implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
  implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

  // OkHttp https://github.com/square/okhttp/
  def okHttpVersion = '4.9.1'
  implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
  implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"

  // Moshi https://github.com/square/moshi
  def moshiVersion = '1.12.0'
  implementation "com.squareup.moshi:moshi:$moshiVersion"
  implementation "com.squareup.moshi:moshi-adapters:$moshiVersion"
  kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"

  // Chucker https://github.com/ChuckerTeam/chucker
  def chuckerVersion = '3.4.0'
  debugImplementation "com.github.chuckerteam.chucker:library:$chuckerVersion"
  releaseImplementation "com.github.chuckerteam.chucker:library-no-op:$chuckerVersion"

  // Timber Kt https://github.com/ajalt/timberkt
  implementation 'com.github.ajalt:timberkt:1.5.1'

  // Firebase https://firebase.google.com/support/release-notes/android
  implementation platform('com.google.firebase:firebase-bom:28.0.0')
  implementation 'com.google.firebase:firebase-analytics-ktx'
  implementation 'com.google.firebase:firebase-crashlytics-ktx'
  implementation 'com.google.firebase:firebase-perf-ktx'

  // QR code scanner https://github.com/journeyapps/zxing-android-embedded
  //noinspection GradleDependency
  implementation('com.journeyapps:zxing-android-embedded:4.1.0') { transitive = false }
  //noinspection GradleDependency
  implementation 'com.google.zxing:core:3.3.0'

  // KPermissions https://github.com/fondesa/kpermissions
  implementation 'com.github.fondesa:kpermissions:3.2.1'

  // Progress Button https://github.com/razir/ProgressButton
  implementation 'com.github.razir.progressbutton:progressbutton:2.1.0'

  // https://square.github.io/leakcanary/getting_started
  debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

  //
  // Test Libraries
  //

  testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
  testImplementation "com.squareup.okhttp3:mockwebserver:$okHttpVersion"

  // Kluent https://github.com/MarkusAmshove/Kluent
  testImplementation 'org.amshove.kluent:kluent:1.65'

  // Robolectric http://robolectric.org/getting-started/
  testImplementation 'org.robolectric:robolectric:4.5.1'

  // Junit 5 https://github.com/junit-team/junit5
  def junit5Version = "5.7.1"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5Version"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5Version"
  testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
  testImplementation "org.junit.vintage:junit-vintage-engine:$junit5Version"

  // Coroutines Test
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

  // Arch https://developer.android.com/jetpack/androidx/releases/arch
  testImplementation 'androidx.arch.core:core-testing:2.1.0'

  // MockK https://github.com/mockk/mockk
  testImplementation 'io.mockk:mockk:1.11.0'

  // Add field to BuildConfig
  android.defaultConfig.buildConfigField 'String', 'RETROFIT_VERSION', "\"$retrofitVersion\""
}

/**
 * Returns current formatted date
 */
static def getDate() {
  return new Date().format("[yyyy.MM.dd_HH-mm]")
}
